import itertools
import Aircraft
import route
import airport

class Itinerary:

	AirportAtlas = airport.AirportAtlas()

	def __init__(self, home, airport1, airport2, airport3, airport4, aircraftType):
		""" create a new itinerary and permute all routes """
		self.home = home
		self.airports2Visit = [airport1, airport2, airport3, airport4] #this is what we want to permute. We ignore the home airport and append later
		self.aircraftType = aircraftType.upper()
		self.getAllRoutes()

	def getBaseRoutes(self):
		""" get all permutations of the route"""
		allRoutesList = []
		allRoutes = list(itertools.permutations(self.airports2Visit))
		for airport in allRoutes:
			# Append the home airport to the start and make the tuples into a list
			allRoutesList.append(route.Route([self.home, airport[0], airport[1], airport[2], airport[3]], self.AirportAtlas))
		self.allRoutes = allRoutesList
		return allRoutesList

	def getOptionalRoutes(self):
		""" same as above but we do it for the route with one extra airport """
		optionalRoutes = []
		for airport in self.airports2Visit:
			routesWithExtraAirport = self.airports2Visit + [airport]
		#	optionalRoutes.append(routesWithExtraAirport)
			allOptionalRoutes = list(itertools.permutations(routesWithExtraAirport))
			for aroute in allOptionalRoutes:
				if aroute[0] != aroute[1] and aroute[1] != aroute[2] and aroute[2] != aroute[3] and aroute[3] != aroute[4]:
					#print(aroute[0], aroute[1], aroute[2], aroute[3], aroute[4])
					optionalRoutes.append(route.Route([self.home, aroute[0], aroute[1], aroute[2], aroute[3], aroute[4]], self.AirportAtlas))
		self.allRoutes = optionalRoutes
		return optionalRoutes
		#allOptionalRoutes = []
		#for airportList in optionalRoutes:
		#	allRoutes = list(itertools.permutations(airportList))
		#	print(allRoutes)

	def getAllRoutes(self):
		""" concatenate the two lists generated by the above methods.
		probably should refer to them by name in case someone wanted to move this code"""
		baseRoutes = self.getBaseRoutes()
		optionalRoutes = self.getOptionalRoutes()
		self.allRoutes = baseRoutes + optionalRoutes


	def toString(self):
		baseRoute = ''
		baseRoute += self.home
		for code in self.airports2Visit:
			baseRoute += ', ' + code
		baseRoute += ', ' + self.home
		return baseRoute





